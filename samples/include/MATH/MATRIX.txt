int mult_matrix(double A[0][0], double B[0][0], double C[0][0], int M, int N, int K) {
    int i = 0;
    int j = 0;
    int k = 0;
    i = 0;
    while (i < M) {
        j = 0;
        while (j < K) {
            C[i][j] = 0;
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < M) {
        j = 0;
        while (j < K) {
            k = 0;
            while (k < N) {
                C[i][j] = C[i][j] + A[i][k] * B[k][j];
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
return 0;
}

int mult_matrix(int A[0][0], int B[0][0], int C[0][0], int M, int N, int K) {
    int i = 0;
    int j = 0;
    int k = 0;
    i = 0;
    while (i < M) {
        j = 0;
        while (j < K) {
            C[i][j] = 0;
            j = j + 1;
        }
        i = i + 1;
    }

    i = 0;
    while (i < M) {
        j = 0;
        while (j < K) {
            k = 0;
            while (k < N) {
                C[i][j] = C[i][j] + A[i][k] * B[k][j];
                k = k + 1;
            }
            j = j + 1;
        }
        i = i + 1;
    }
return 0;
}